{"version":3,"sources":["main.js"],"names":["stage","createjs","Stage","container","Container","x","y","addChild","Ticker","setFPS","addEventListener","currentCat","nextCat","type","indexX","indexY","circleArray","randomX","randomY","count","rodeArry","borderArry","Circle","Shape","call","setCircleType","CreateCircle","getCircleType","color","graphics","beginFill","drawCircle","endFill","prototype","addCircle","i","j","obj","onclicked","Math","floor","random","temp","e","target","mayCat","chose","direction","rodeMax","update","alert","directiontype","row","column","righttop","right","rightbottom","leftbottom","left","lefttop","rodearray","borderarry","flag"],"mappings":"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","file":"main.60189314.js","sourceRoot":"..\\src","sourcesContent":["\r\n//舞台容器的创建\r\nvar stage = new createjs.Stage(\"canvas\");\r\nvar container = new createjs.Container();\r\ncontainer.x = 60;\r\ncontainer.y = 60;\r\nstage.addChild(container);\r\n\r\n//设置画面连续刷新，一秒刷新60次\r\ncreatejs.Ticker.setFPS(60);\r\ncreatejs.Ticker.addEventListener(\"tick\",stage);\r\n\r\nvar currentCat;//当前猫\r\nvar nextCat;//猫将要移动的位置\r\nvar type;//绘制圆形的颜色类型\r\nvar indexX = 0,indexY = 0;//圆形对象里的圆形的坐标\r\nvar circleArray = [[],[],[],[],[],[],[],[],[]];//圆形放置的数组\r\nvar randomX,randomY;//随机生成的坐标位置\r\nvar count = 5;//开始的时候随机生成5个障碍物\r\nvar rodeArry = [0,0,0,0,0,0];//每条路径出口数量\r\nvar borderArry = [0,0,0,0,0,0];//记录每条路是否有到边界\r\n\r\n//圆形对象函数\r\nfunction Circle() {\r\n    createjs.Shape.call(this);\r\n    this.indexX = indexX;\r\n    this.indexY = indexY;\r\n    //根据传入的type值设置不同的颜色\r\n    this.setCircleType = function (type) {\r\n        this.type = type;\r\n        switch (type)\r\n        {\r\n            case 1:\r\n                return this.CreateCircle(\"#ccc\");\r\n                break;\r\n            case 2:\r\n                return this.CreateCircle(\"#f18f47\");\r\n                break;\r\n            case 3:\r\n                return this.CreateCircle(\"#5eaaeb\");\r\n                break;\r\n        }\r\n    };\r\n    //获得圆形对象的颜色类型\r\n    this.getCircleType =  function () {\r\n        return this.type;\r\n    };\r\n    //根据颜色创建圆形\r\n    this.CreateCircle = function (color) {\r\n        this.graphics.beginFill(color).drawCircle(0,0,25).endFill();\r\n    };\r\n    //默认创建灰色圆形\r\n    return this.setCircleType(1);\r\n}\r\n\r\n//设置圆函数的原型为形状\r\nCircle.prototype = new createjs.Shape();\r\n\r\n//添加全部圆形到界面\r\nfunction addCircle() {\r\n    //添加9x9个圆形\r\n    for(var i = 0; i < 9; i++)\r\n        for(var j = 0; j < 9; j++)\r\n        {\r\n            var obj = new Circle();\r\n            obj.x = j%2 == 0? i*55 : i*55+25;\r\n            obj.y = j * 55;\r\n            obj.indexX = i;\r\n            obj.indexY = j;\r\n            obj.addEventListener(\"click\",onclicked);\r\n            if(i == 4 && j == 4){\r\n                obj.setCircleType(3);\r\n                currentCat = obj;\r\n            }\r\n            circleArray[i][j] = obj;\r\n            container.addChild(obj);\r\n        }\r\n    //一开始的时候随机出现5个障碍物\r\n    while (count)\r\n    {\r\n        randomX = Math.floor(Math.random() * 9);\r\n        randomY = Math.floor(Math.random() * 9);\r\n        var temp = circleArray[randomX][randomY];\r\n        if(temp != currentCat && temp.getCircleType != 2){\r\n            circleArray[randomX][randomY].setCircleType(2);\r\n            count -- ;\r\n        }\r\n    }\r\n}\r\n//添加事件监听响应函数\r\nfunction onclicked(e) {\r\n    //当点击的是灰色圆形时才进行处理\r\n    if(e.target.getCircleType() == 1){\r\n        //首先将点击的圆形设置成橙色障碍物\r\n        e.target.setCircleType(2);\r\n        //开始进行移动猫的操作\r\n        //找到当前猫所有出口方向的可以走的灰色圆形数量，并存到路径数组中\r\n        var mayCat = currentCat;\r\n        for(var i = 0; i < 6; i++)\r\n        {\r\n            //每次点击路径数组都清零重新记录\r\n            rodeArry[i] = 0;\r\n            borderArry[i] = 0;\r\n            //找到每个方向的出口路径数量放到对应数组中\r\n            while (1){\r\n                if (chose(mayCat, i) != mayCat && chose(mayCat, i).getCircleType() != 2) {\r\n                    rodeArry[i]++;\r\n                    mayCat = chose(mayCat, i);\r\n                }\r\n                else {\r\n                    if(chose(mayCat, i) == mayCat){\r\n                        borderArry[i] = 1;\r\n                    }\r\n                    mayCat = currentCat;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        /*for(var m = 0; m < 6; m++){\r\n            alert(selectArry[m]);\r\n        }*/\r\n        //猫要走的方向\r\n        var direction = rodeMax(rodeArry,borderArry);\r\n        nextCat = chose(currentCat,direction);\r\n        if(nextCat.getCircleType() != 2){\r\n            nextCat.setCircleType(3);\r\n            currentCat.setCircleType(1);\r\n            currentCat = nextCat;\r\n        }\r\n        else {\r\n            stage.update();\r\n            alert(\"真棒，神经猫被你抓住了\");\r\n        }\r\n        if(currentCat.indexX == 0 || currentCat.indexX == 8 || currentCat.indexY == 0 || currentCat.indexY == 8){\r\n            stage.update();\r\n            alert(\"神经猫逃走了！\");\r\n        }\r\n    }\r\n}\r\n//根据给的当前猫的位置找到旁边的所有出口\r\nfunction chose(mayCat, directiontype) {\r\n    //获得当前猫的坐标位置\r\n    var row = mayCat.indexX;\r\n    var column = mayCat.indexY;\r\n    //如果当前猫坐标到了边界，则不再往上找了\r\n    if(row == 0 || column == 0 || row == 8 || column == 8 )\r\n        return mayCat;\r\n    //右上\r\n    var righttop = column%2 == 0? circleArray[row][column - 1]:\r\n        circleArray[row + 1][column - 1];\r\n    //右边\r\n    var right = circleArray[row + 1][column];\r\n    //右下\r\n    var rightbottom = column%2 == 0? circleArray[row][column + 1] :\r\n        circleArray[row + 1][column + 1];\r\n    //左下\r\n    var leftbottom = column%2 == 0? circleArray[row - 1][column + 1] :\r\n        circleArray[row][column + 1];\r\n    //左边\r\n    var left = circleArray[row - 1][column];\r\n    //左上\r\n    var lefttop = column%2 == 0? circleArray[row - 1][column - 1] :\r\n        circleArray[row][column - 1];\r\n    //根据传的方向值返回该方向的对象\r\n    switch (directiontype){\r\n        case 0:\r\n            return righttop;\r\n            break;\r\n        case 1:\r\n            return right;\r\n            break;\r\n        case 2:\r\n            return rightbottom;\r\n            break;\r\n        case 3:\r\n            return leftbottom;\r\n            break;\r\n        case 4:\r\n            return left;\r\n            break;\r\n        case 5:\r\n            return lefttop;\r\n            break;\r\n    }\r\n}\r\n//找出路径数组中出口最多的方向\r\nfunction rodeMax(rodearray,borderarry) {\r\n    var flag = false;//标志判断路径方向是否到边界\r\n    var direction = 0;//最终的方向初始为0\r\n    //找到是否存在有边界的出口\r\n    for(var j = 0; j < 6; j++){\r\n        if(borderarry[j])\r\n            flag = true;\r\n        else\r\n            rodearray[j] += 100;\r\n    }\r\n    //如果有边界的出口就取最短路径\r\n    if(flag){\r\n        for(var i = 0; i < 6; i++){\r\n            if(rodearray[i] < rodearray[direction])\r\n                direction = i;\r\n        }\r\n    }\r\n    //如果该路径都没边界出口则选择路径长的挣扎下\r\n    else {\r\n        for(var i = 0; i < 6; i++){\r\n            if(rodearray[i] > rodearray[direction])\r\n                direction = i;\r\n        }\r\n    }\r\n    return direction;\r\n}\r\n//初始化游戏\r\naddCircle();"]}